import random
from matrix import Matrix
from pca import pca
from explained import explained_variance_ratio

def add_noise_and_compare(X: Matrix, noise_level: float = 0.1):
    n, m = X.rows, X.cols

    # === PCA –î–û –®–£–ú–ê ===
    print("üìä PCA –¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à—É–º–∞:")
    X_proj_before, gamma_before = pca(X, k=-1)
    print(f"–û–±—ä—è—Å–Ω—ë–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è (–¥–æ): Œ≥ = {gamma_before:.4f}")

    # === –î–æ–±–∞–≤–ª—è–µ–º —à—É–º ===
    print(f"\nüå™Ô∏è –î–æ–±–∞–≤–ª—è–µ–º —à—É–º: —É—Ä–æ–≤–µ–Ω—å = {noise_level}")
    noisy_data = []
    for i in range(n):
        row = []
        for j in range(m):
            val = X[i][j]
            noise = random.gauss(0, noise_level)
            row.append(val + noise)
        noisy_data.append(row)
    X_noisy = Matrix(noisy_data)

    # === PCA –ü–û–°–õ–ï –®–£–ú–ê ===
    print("\nüìä PCA –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —à—É–º–∞:")
    X_proj_after, gamma_after = pca(X_noisy, k=-1)
    print(f"–û–±—ä—è—Å–Ω—ë–Ω–Ω–∞—è –¥–∏—Å–ø–µ—Ä—Å–∏—è (–ø–æ—Å–ª–µ): Œ≥ = {gamma_after:.4f}")

    # === –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π ===
    delta = abs(gamma_after - gamma_before)
    print(f"\nüìâ –†–∞–∑–Ω–∏—Ü–∞ –≤ –æ–±—ä—è—Å–Ω—ë–Ω–Ω–æ–π –¥–∏—Å–ø–µ—Ä—Å–∏–∏: ŒîŒ≥ = {delta:.6f}")
    if delta < 0.05:
        print("‚úÖ PCA —É—Å—Ç–æ–π—á–∏–≤–æ –∫ –¥–∞–Ω–Ω–æ–º—É —É—Ä–æ–≤–Ω—é —à—É–º–∞.")
    else:
        print("‚ö†Ô∏è –í–ª–∏—è–Ω–∏–µ —à—É–º–∞ –∑–∞–º–µ—Ç–Ω–æ ‚Äî —Å–Ω–∏–∂–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞.")
